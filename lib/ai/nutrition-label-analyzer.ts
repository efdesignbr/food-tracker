import { GoogleGenerativeAI } from '@google/generative-ai';
import { env } from '../env';

export type NutritionLabelAnalysis = {
  name: string;
  brand?: string;
  serving_size?: string;
  calories?: number;
  protein?: number;
  carbs?: number;
  fat?: number;
  fiber?: number;
  sodium?: number;
  sugar?: number;
  saturated_fat?: number;
};

export async function analyzeNutritionLabel(
  bytes: Uint8Array,
  mediaType: string
): Promise<NutritionLabelAnalysis> {
  console.log('ü§ñ [IA] Iniciando an√°lise...');

  try {
    const e = env();

    if (!e.GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY n√£o configurada');
    }

    const genAI = new GoogleGenerativeAI(e.GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({
      model: e.GEMINI_MODEL || 'gemini-2.0-flash-exp',
    });

    const prompt = `Analise esta imagem de tabela nutricional brasileira e extraia as seguintes informa√ß√µes:

INSTRU√á√ïES IMPORTANTES:
1. Extraia APENAS os valores vis√≠veis na imagem
2. Se houver colunas "100g" e "Por√ß√£o", use SEMPRE os valores da coluna "Por√ß√£o"
3. S√≥dio deve ser convertido para miligramas (mg)
4. N√£o invente valores - se n√£o estiver vis√≠vel, n√£o inclua

FORMATO DE RESPOSTA (JSON):
{
  "name": "Nome do produto",
  "brand": "Marca (opcional)",
  "serving_size": "Tamanho da por√ß√£o (ex: 30g)",
  "calories": n√∫mero (kcal),
  "protein": n√∫mero (gramas),
  "carbs": n√∫mero (gramas),
  "fat": n√∫mero (gramas),
  "fiber": n√∫mero (gramas, opcional),
  "sodium": n√∫mero (miligramas, opcional),
  "sugar": n√∫mero (gramas, opcional),
  "saturated_fat": n√∫mero (gramas, opcional)
}

Retorne APENAS o JSON v√°lido, sem texto adicional.`;

    const base64Data = Buffer.from(bytes).toString('base64');

    console.log('ü§ñ [IA] Enviando para Gemini...');

    const result = await model.generateContent([
      prompt,
      {
        inlineData: {
          data: base64Data,
          mimeType: mediaType
        }
      }
    ]);

    const response = result.response;
    const text = response.text();

    console.log('ü§ñ [IA] Resposta recebida:', text.substring(0, 200));

    // Remove poss√≠veis markdown wrappers
    let jsonText = text.trim();
    if (jsonText.startsWith('```json')) {
      jsonText = jsonText.replace(/```json\n?/g, '').replace(/```\n?/g, '');
    } else if (jsonText.startsWith('```')) {
      jsonText = jsonText.replace(/```\n?/g, '');
    }

    const parsed = JSON.parse(jsonText) as NutritionLabelAnalysis;

    console.log('‚úÖ [IA] An√°lise conclu√≠da:', parsed);

    return parsed;

  } catch (error: any) {
    console.error('‚ùå [IA] Erro:', {
      message: error.message,
      stack: error.stack
    });

    throw new Error(`Falha na an√°lise de IA: ${error.message}`);
  }
}
